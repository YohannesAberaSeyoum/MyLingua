# Generated by Django 3.2.8 on 2021-10-27 16:55

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contentValue', models.TextField()),
                ('contentImage', models.ImageField(upload_to='media/')),
                ('contentAudio', models.FileField(upload_to='media/')),
                ('contentVideo', models.FileField(upload_to='media/')),
                ('isComplete', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('courseName', models.CharField(max_length=200)),
                ('courseDescription', models.TextField()),
                ('contents', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='language_app.content')),
            ],
        ),
        migrations.CreateModel(
            name='Preference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('siteLang', models.CharField(max_length=200)),
                ('startLevel', models.CharField(max_length=20)),
                ('currLevel', models.CharField(max_length=20)),
                ('accountType', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marks', models.IntegerField()),
                ('questionDir', models.FilePathField(path='C:/Users/Dires/project/language_project/Questions')),
                ('answerDir', models.FilePathField(path='C:/Users/Dires/project/language_project/Answers')),
                ('scored', models.IntegerField()),
                ('courseId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='language_app.course')),
            ],
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.IntegerField()),
                ('courseId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='language_app.course')),
            ],
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certDate', models.DateField(auto_now_add=True)),
                ('certUrl', models.URLField()),
                ('courseId', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='language_app.course')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('certId', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='language_app.certificate')),
                ('courseId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='language_app.course')),
                ('gradeId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='language_app.grade')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('prefId', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='language_app.preference')),
                ('quizId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='language_app.quiz')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
